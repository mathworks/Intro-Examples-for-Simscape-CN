function [Optimized_DesignVars, Info] = responseOptimization_model_spline(DesignVars)
%RESPONSEOPTIMIZATION_MODEL_SPLINE
%
% Solve a design optimization problem for the model_spline model.
%
% The function returns optimized parameter values, Optimized_DesignVars,
% and optimization termination information, Info.
%
% The input argument, DesignVars, defines the model parameters to optimize,
% if omitted the parameters specified in the function body are optimized.
%
% Modify the function to include or exclude new design requirements, or
% to change the optimization options.
%
% Auto-generated by SDOTOOL on 05-Apr-2022 12:04:21.
%

%% Open the model.
open_system('model_spline')

%% Specify Design Variables
%
% Specify model parameters as design variables to optimize.
if nargin < 1 || isempty(DesignVars)
  DesignVars = sdo.getParameterFromModel('model_spline','y_spline');
  DesignVars(1).Minimum(2:end) = -2;
  DesignVars(1).Maximum(1:end-1) = 0;
  DesignVars(1).Minimum(1) = 0;
  DesignVars(1).Maximum(end) = -2;
  DesignVars(1).Free(1) = 0;
  DesignVars(1).Free(end) = 0;
  DesignVars(1).Free(2:end-1) = 1;
end

%% Specify Design Requirements
%
% Specify design requirements to satisfy during optimization.
Requirements = struct;
Requirements.SignalProperty = sdo.requirements.SignalProperty(...
  'Function', @(ts)sdo.requirements.signalPropertyAlgs(ts,'final'), ...
  'Type', 'min');

%% Simulation Definition
%
% Specify model signals to log during model simulation.
Simulator = sdo.SimulationTest('model_spline');

Sig_Info = Simulink.SimulationData.SignalLoggingInfo;
Sig_Info.BlockPath = 'model_spline/Clock ';
Sig_Info.LoggingInfo.LoggingName = 'Sig';
Sig_Info.LoggingInfo.NameMode = 1;

Simulator.LoggingInfo.Signals = Sig_Info;

%% Create Optimization Objective Function
%
% Create a function that is called at each optimization iteration
% to evaluate the design requirements.
%
% Use an anonymous function with one argument that calls model_spline_optFcn.
optimfcn = @(P) model_spline_optFcn(P,Simulator,Requirements);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.OptimizedModel = Simulator;

%% Optimize the Design
%
% Call sdo.optimize with the objective function handle, parameters to
% optimize, and options.
[Optimized_DesignVars,Info] = sdo.optimize(optimfcn,DesignVars,Options);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('model_spline',Optimized_DesignVars);
end

function Vals = model_spline_optFcn(P,Simulator,Requirements)
%MODEL_SPLINE_OPTFCN
%
% Function called at each iteration of the optimization problem.
%
% The function is called with a set of parameter values, P, and returns
% the objective value and constraint violations, Vals, to the optimization
% solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%% Model Evaluation

% Simulate the model.
Simulator.Parameters = P;
Simulator = sim(Simulator);

% Retrieve logged signal data.
SimLog = find(Simulator.LoggedData,get_param('model_spline','SignalLoggingName'));
Sig_Log = find(SimLog,'Sig');

% Evaluate the design requirements.
F_SignalProperty = evalRequirement(Requirements.SignalProperty,Sig_Log.Values);

%% Return Values.
%
% Collect the evaluated design requirement values in a structure to
% return to the optimization solver.
Vals.F = F_SignalProperty;
end
